datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  Client
  Admin
}

enum Priority {
  High
  Mid
  Low
}

enum Status {
  Active
  Closed
}

model User {
  id            String    @id @default(cuid())
  phone         String    @unique
  email         String    @unique
  password      String
  role          Role      @default(Client) // Using the Role enum here
  tickets       Ticket[]
  accounts      Account[]
  sessions      Session[]
  name          String?
  emailVerified DateTime? @map("email_verified")
  image         String?

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Ticket {
  id          String     @id @default(cuid())
  title       String
  description String
  priority    Priority   @default(Low)
  status      Status     @default(Active)
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())

  @@map("tickets")
}